{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4289e2ef",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:09.064291Z",
     "iopub.status.busy": "2024-05-23T03:03:09.063534Z",
     "iopub.status.idle": "2024-05-23T03:03:10.180976Z",
     "shell.execute_reply": "2024-05-23T03:03:10.179950Z"
    },
    "papermill": {
     "duration": 1.139276,
     "end_time": "2024-05-23T03:03:10.184058",
     "exception": false,
     "start_time": "2024-05-23T03:03:09.044782",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/titanic/train.csv\n",
      "/kaggle/input/titanic/test.csv\n",
      "/kaggle/input/titanic/gender_submission.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fc2cce65",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:10.221190Z",
     "iopub.status.busy": "2024-05-23T03:03:10.220616Z",
     "iopub.status.idle": "2024-05-23T03:03:10.275081Z",
     "shell.execute_reply": "2024-05-23T03:03:10.273595Z"
    },
    "papermill": {
     "duration": 0.076215,
     "end_time": "2024-05-23T03:03:10.277977",
     "exception": false,
     "start_time": "2024-05-23T03:03:10.201762",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data = pd.read_csv(\"/kaggle/input/titanic/train.csv\")\n",
    "train_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d99cc86d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:10.318056Z",
     "iopub.status.busy": "2024-05-23T03:03:10.317163Z",
     "iopub.status.idle": "2024-05-23T03:03:10.343349Z",
     "shell.execute_reply": "2024-05-23T03:03:10.342138Z"
    },
    "papermill": {
     "duration": 0.05088,
     "end_time": "2024-05-23T03:03:10.346630",
     "exception": false,
     "start_time": "2024-05-23T03:03:10.295750",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892</td>\n",
       "      <td>3</td>\n",
       "      <td>Kelly, Mr. James</td>\n",
       "      <td>male</td>\n",
       "      <td>34.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330911</td>\n",
       "      <td>7.8292</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>893</td>\n",
       "      <td>3</td>\n",
       "      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n",
       "      <td>female</td>\n",
       "      <td>47.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>363272</td>\n",
       "      <td>7.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>894</td>\n",
       "      <td>2</td>\n",
       "      <td>Myles, Mr. Thomas Francis</td>\n",
       "      <td>male</td>\n",
       "      <td>62.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>240276</td>\n",
       "      <td>9.6875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>895</td>\n",
       "      <td>3</td>\n",
       "      <td>Wirz, Mr. Albert</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>315154</td>\n",
       "      <td>8.6625</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>896</td>\n",
       "      <td>3</td>\n",
       "      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n",
       "      <td>female</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3101298</td>\n",
       "      <td>12.2875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Pclass                                          Name     Sex  \\\n",
       "0          892       3                              Kelly, Mr. James    male   \n",
       "1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n",
       "2          894       2                     Myles, Mr. Thomas Francis    male   \n",
       "3          895       3                              Wirz, Mr. Albert    male   \n",
       "4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n",
       "\n",
       "    Age  SibSp  Parch   Ticket     Fare Cabin Embarked  \n",
       "0  34.5      0      0   330911   7.8292   NaN        Q  \n",
       "1  47.0      1      0   363272   7.0000   NaN        S  \n",
       "2  62.0      0      0   240276   9.6875   NaN        Q  \n",
       "3  27.0      0      0   315154   8.6625   NaN        S  \n",
       "4  22.0      1      1  3101298  12.2875   NaN        S  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data = pd.read_csv(\"/kaggle/input/titanic/test.csv\")\n",
    "test_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "680dcdb0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:10.386217Z",
     "iopub.status.busy": "2024-05-23T03:03:10.385778Z",
     "iopub.status.idle": "2024-05-23T03:03:10.393342Z",
     "shell.execute_reply": "2024-05-23T03:03:10.392168Z"
    },
    "papermill": {
     "duration": 0.031796,
     "end_time": "2024-05-23T03:03:10.395926",
     "exception": false,
     "start_time": "2024-05-23T03:03:10.364130",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((891, 12), (418, 11))"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.shape,test_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4f0bf3e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:10.435524Z",
     "iopub.status.busy": "2024-05-23T03:03:10.434727Z",
     "iopub.status.idle": "2024-05-23T03:03:10.452102Z",
     "shell.execute_reply": "2024-05-23T03:03:10.450427Z"
    },
    "papermill": {
     "duration": 0.040147,
     "end_time": "2024-05-23T03:03:10.454995",
     "exception": false,
     "start_time": "2024-05-23T03:03:10.414848",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SibSp\n",
       "0    608\n",
       "1    209\n",
       "2     28\n",
       "4     18\n",
       "3     16\n",
       "8      7\n",
       "5      5\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data['SibSp'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "107af69f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:10.496058Z",
     "iopub.status.busy": "2024-05-23T03:03:10.495399Z",
     "iopub.status.idle": "2024-05-23T03:03:10.506821Z",
     "shell.execute_reply": "2024-05-23T03:03:10.505486Z"
    },
    "papermill": {
     "duration": 0.035536,
     "end_time": "2024-05-23T03:03:10.509555",
     "exception": false,
     "start_time": "2024-05-23T03:03:10.474019",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Parch\n",
       "0    678\n",
       "1    118\n",
       "2     80\n",
       "5      5\n",
       "3      5\n",
       "4      4\n",
       "6      1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data['Parch'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2fa391c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:10.550232Z",
     "iopub.status.busy": "2024-05-23T03:03:10.549269Z",
     "iopub.status.idle": "2024-05-23T03:03:10.574822Z",
     "shell.execute_reply": "2024-05-23T03:03:10.573413Z"
    },
    "papermill": {
     "duration": 0.049965,
     "end_time": "2024-05-23T03:03:10.577943",
     "exception": false,
     "start_time": "2024-05-23T03:03:10.527978",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Name         891 non-null    object \n",
      " 4   Sex          891 non-null    object \n",
      " 5   Age          714 non-null    float64\n",
      " 6   SibSp        891 non-null    int64  \n",
      " 7   Parch        891 non-null    int64  \n",
      " 8   Ticket       891 non-null    object \n",
      " 9   Fare         891 non-null    float64\n",
      " 10  Cabin        204 non-null    object \n",
      " 11  Embarked     889 non-null    object \n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.7+ KB\n"
     ]
    }
   ],
   "source": [
    "train_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "94205b58",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:10.617506Z",
     "iopub.status.busy": "2024-05-23T03:03:10.617053Z",
     "iopub.status.idle": "2024-05-23T03:03:12.669342Z",
     "shell.execute_reply": "2024-05-23T03:03:12.667715Z"
    },
    "papermill": {
     "duration": 2.076168,
     "end_time": "2024-05-23T03:03:12.672498",
     "exception": false,
     "start_time": "2024-05-23T03:03:10.596330",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x800 with 9 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "train_data.hist(bins=50, figsize=(12,8))\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5c4181e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:12.716494Z",
     "iopub.status.busy": "2024-05-23T03:03:12.716055Z",
     "iopub.status.idle": "2024-05-23T03:03:12.724254Z",
     "shell.execute_reply": "2024-05-23T03:03:12.723074Z"
    },
    "papermill": {
     "duration": 0.033725,
     "end_time": "2024-05-23T03:03:12.728440",
     "exception": false,
     "start_time": "2024-05-23T03:03:12.694715",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def bar_plot(feature):\n",
    "    Survived = train_data[train_data['Survived']==1][feature].value_counts()\n",
    "    Dead = train_data[train_data['Survived']==0][feature].value_counts()\n",
    "    df = pd.DataFrame([Survived,Dead])\n",
    "    df.index = ['Survived','Dead']\n",
    "    df.plot(kind='bar', stacked=True),"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c6f2819f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:12.769428Z",
     "iopub.status.busy": "2024-05-23T03:03:12.769001Z",
     "iopub.status.idle": "2024-05-23T03:03:13.079033Z",
     "shell.execute_reply": "2024-05-23T03:03:13.077422Z"
    },
    "papermill": {
     "duration": 0.334842,
     "end_time": "2024-05-23T03:03:13.082588",
     "exception": false,
     "start_time": "2024-05-23T03:03:12.747746",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "bar_plot('Sex')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "33d9dd0c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:13.126784Z",
     "iopub.status.busy": "2024-05-23T03:03:13.126337Z",
     "iopub.status.idle": "2024-05-23T03:03:13.449468Z",
     "shell.execute_reply": "2024-05-23T03:03:13.448170Z"
    },
    "papermill": {
     "duration": 0.349008,
     "end_time": "2024-05-23T03:03:13.452354",
     "exception": false,
     "start_time": "2024-05-23T03:03:13.103346",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "bar_plot('Pclass')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "073636ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:13.498611Z",
     "iopub.status.busy": "2024-05-23T03:03:13.498190Z",
     "iopub.status.idle": "2024-05-23T03:03:13.900721Z",
     "shell.execute_reply": "2024-05-23T03:03:13.899297Z"
    },
    "papermill": {
     "duration": 0.428658,
     "end_time": "2024-05-23T03:03:13.903683",
     "exception": false,
     "start_time": "2024-05-23T03:03:13.475025",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Survived:  SibSp\n",
      "0    210\n",
      "1    112\n",
      "2     13\n",
      "3      4\n",
      "4      3\n",
      "Name: count, dtype: int64\n",
      "Dead:  SibSp\n",
      "0    398\n",
      "1     97\n",
      "4     15\n",
      "2     15\n",
      "3     12\n",
      "8      7\n",
      "5      5\n",
      "Name: count, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "bar_plot('SibSp')\n",
    "print('Survived: ', train_data[train_data['Survived']==1]['SibSp'].value_counts())\n",
    "print('Dead: ', train_data[train_data['Survived']==0]['SibSp'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d3385f20",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:13.951600Z",
     "iopub.status.busy": "2024-05-23T03:03:13.951160Z",
     "iopub.status.idle": "2024-05-23T03:03:14.493550Z",
     "shell.execute_reply": "2024-05-23T03:03:14.491971Z"
    },
    "papermill": {
     "duration": 0.569848,
     "end_time": "2024-05-23T03:03:14.496515",
     "exception": false,
     "start_time": "2024-05-23T03:03:13.926667",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Survived:  Parch\n",
      "0    233\n",
      "1     65\n",
      "2     40\n",
      "3      3\n",
      "5      1\n",
      "Name: count, dtype: int64\n",
      "Dead:  Parch\n",
      "0    445\n",
      "1     53\n",
      "2     40\n",
      "5      4\n",
      "4      4\n",
      "3      2\n",
      "6      1\n",
      "Name: count, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "bar_plot('Parch')\n",
    "print('Survived: ', train_data[train_data['Survived']==1]['Parch'].value_counts())\n",
    "print('Dead: ', train_data[train_data['Survived']==0]['Parch'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "0212a930",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:14.547215Z",
     "iopub.status.busy": "2024-05-23T03:03:14.545400Z",
     "iopub.status.idle": "2024-05-23T03:03:14.569693Z",
     "shell.execute_reply": "2024-05-23T03:03:14.567402Z"
    },
    "papermill": {
     "duration": 0.053669,
     "end_time": "2024-05-23T03:03:14.573985",
     "exception": false,
     "start_time": "2024-05-23T03:03:14.520316",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_data['family-size'] = train_data['SibSp'] + train_data['Parch'] + 1\n",
    "train_data['Fare_per_family'] = train_data['Fare']/train_data['family-size']\n",
    "train_data['Age'] = train_data['Age'].fillna(train_data['Age'].median())\n",
    "train_data['Age'] = train_data['Age'].astype(int)\n",
    "\n",
    "test_data['family-size'] = test_data['SibSp'] + test_data['Parch'] + 1\n",
    "test_data['Fare_per_family'] = test_data['Fare']/test_data['family-size']\n",
    "test_data['Age'] = test_data['Age'].fillna(test_data['Age'].median())\n",
    "test_data['Age'] = test_data['Age'].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f5b64b3a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:14.627007Z",
     "iopub.status.busy": "2024-05-23T03:03:14.626029Z",
     "iopub.status.idle": "2024-05-23T03:03:14.636010Z",
     "shell.execute_reply": "2024-05-23T03:03:14.635076Z"
    },
    "papermill": {
     "duration": 0.036107,
     "end_time": "2024-05-23T03:03:14.638623",
     "exception": false,
     "start_time": "2024-05-23T03:03:14.602516",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_data['Title'] = train_data['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\n",
    "test_data['Title'] = test_data['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ef074d3d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:14.683337Z",
     "iopub.status.busy": "2024-05-23T03:03:14.682669Z",
     "iopub.status.idle": "2024-05-23T03:03:14.691455Z",
     "shell.execute_reply": "2024-05-23T03:03:14.689820Z"
    },
    "papermill": {
     "duration": 0.036732,
     "end_time": "2024-05-23T03:03:14.695705",
     "exception": false,
     "start_time": "2024-05-23T03:03:14.658973",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Mr', 'Mrs', 'Miss', 'Master', 'Don', 'Rev', 'Dr', 'Mme', 'Ms',\n",
       "       'Major', 'Lady', 'Sir', 'Mlle', 'Col', 'Capt', 'Countess',\n",
       "       'Jonkheer'], dtype=object)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data['Title'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "68813370",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:14.757577Z",
     "iopub.status.busy": "2024-05-23T03:03:14.756744Z",
     "iopub.status.idle": "2024-05-23T03:03:14.768955Z",
     "shell.execute_reply": "2024-05-23T03:03:14.767801Z"
    },
    "papermill": {
     "duration": 0.046021,
     "end_time": "2024-05-23T03:03:14.771584",
     "exception": false,
     "start_time": "2024-05-23T03:03:14.725563",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "title_mapping = {'Mr':0, 'Mrs':1, 'Miss':2, 'Master':3, 'Don':3, 'Rev':3, 'Dr':3,\n",
    "                  'Mme':3, 'Ms':3, 'Major':3, 'Lady':3, 'Sir':3, 'Mile':3, 'Col':3,\n",
    "                  'Capt':3, 'Countess':3, 'Jonkheer':3}\n",
    "\n",
    "train_data['Title'] = train_data['Title'].map(title_mapping)\n",
    "train_data['Title'] = train_data['Title'].fillna(3)\n",
    "train_data['Title'] = train_data['Title'].astype(int)\n",
    "\n",
    "test_data['Title'] = test_data['Title'].map(title_mapping)\n",
    "test_data['Title'] = test_data['Title'].fillna(3)\n",
    "test_data['Title'] = test_data['Title'].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "459da275",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:14.817272Z",
     "iopub.status.busy": "2024-05-23T03:03:14.816562Z",
     "iopub.status.idle": "2024-05-23T03:03:14.835615Z",
     "shell.execute_reply": "2024-05-23T03:03:14.834304Z"
    },
    "papermill": {
     "duration": 0.044637,
     "end_time": "2024-05-23T03:03:14.838171",
     "exception": false,
     "start_time": "2024-05-23T03:03:14.793534",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>family-size</th>\n",
       "      <th>Fare_per_family</th>\n",
       "      <th>Title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>2</td>\n",
       "      <td>3.62500</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "      <td>2</td>\n",
       "      <td>35.64165</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>7.92500</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "      <td>2</td>\n",
       "      <td>26.55000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>8.05000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex  Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male   22      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female   38      1   \n",
       "2                             Heikkinen, Miss. Laina  female   26      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female   35      1   \n",
       "4                           Allen, Mr. William Henry    male   35      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  family-size  \\\n",
       "0      0         A/5 21171   7.2500   NaN        S            2   \n",
       "1      0          PC 17599  71.2833   C85        C            2   \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S            1   \n",
       "3      0            113803  53.1000  C123        S            2   \n",
       "4      0            373450   8.0500   NaN        S            1   \n",
       "\n",
       "   Fare_per_family  Title  \n",
       "0          3.62500      0  \n",
       "1         35.64165      1  \n",
       "2          7.92500      2  \n",
       "3         26.55000      1  \n",
       "4          8.05000      0  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "8f437cf7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:14.883827Z",
     "iopub.status.busy": "2024-05-23T03:03:14.883087Z",
     "iopub.status.idle": "2024-05-23T03:03:15.425308Z",
     "shell.execute_reply": "2024-05-23T03:03:15.424184Z"
    },
    "papermill": {
     "duration": 0.569108,
     "end_time": "2024-05-23T03:03:15.428398",
     "exception": false,
     "start_time": "2024-05-23T03:03:14.859290",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_data.plot(kind='scatter', x='Fare', y='Age', alpha=0.1,\n",
    "               c='family-size', cmap=plt.get_cmap('jet'), colorbar=True,\n",
    "               s=train_data['Survived']* 100 + 10, label='Survived',);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "cf7c4de6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:15.478700Z",
     "iopub.status.busy": "2024-05-23T03:03:15.477832Z",
     "iopub.status.idle": "2024-05-23T03:03:15.488243Z",
     "shell.execute_reply": "2024-05-23T03:03:15.486906Z"
    },
    "papermill": {
     "duration": 0.039095,
     "end_time": "2024-05-23T03:03:15.491166",
     "exception": false,
     "start_time": "2024-05-23T03:03:15.452071",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_data = train_data.drop('Name', axis=1)\n",
    "\n",
    "test_data = test_data.drop('Name', axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "9f6415cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:15.556731Z",
     "iopub.status.busy": "2024-05-23T03:03:15.556309Z",
     "iopub.status.idle": "2024-05-23T03:03:15.584135Z",
     "shell.execute_reply": "2024-05-23T03:03:15.582907Z"
    },
    "papermill": {
     "duration": 0.064396,
     "end_time": "2024-05-23T03:03:15.586961",
     "exception": false,
     "start_time": "2024-05-23T03:03:15.522565",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>family-size</th>\n",
       "      <th>Fare_per_family</th>\n",
       "      <th>Title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>22</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>2</td>\n",
       "      <td>3.62500</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>38</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "      <td>2</td>\n",
       "      <td>35.64165</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>7.92500</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "      <td>2</td>\n",
       "      <td>26.55000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>8.05000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>887</td>\n",
       "      <td>2</td>\n",
       "      <td>male</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>211536</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>13.00000</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>888</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>112053</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>B42</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>30.00000</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>889</td>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>W./C. 6607</td>\n",
       "      <td>23.4500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>4</td>\n",
       "      <td>5.86250</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>890</td>\n",
       "      <td>1</td>\n",
       "      <td>male</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>111369</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>C148</td>\n",
       "      <td>C</td>\n",
       "      <td>1</td>\n",
       "      <td>30.00000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>891</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>32</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>370376</td>\n",
       "      <td>7.7500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "      <td>1</td>\n",
       "      <td>7.75000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Pclass     Sex  Age  SibSp  Parch            Ticket  \\\n",
       "0              1       3    male   22      1      0         A/5 21171   \n",
       "1              2       1  female   38      1      0          PC 17599   \n",
       "2              3       3  female   26      0      0  STON/O2. 3101282   \n",
       "3              4       1  female   35      1      0            113803   \n",
       "4              5       3    male   35      0      0            373450   \n",
       "..           ...     ...     ...  ...    ...    ...               ...   \n",
       "886          887       2    male   27      0      0            211536   \n",
       "887          888       1  female   19      0      0            112053   \n",
       "888          889       3  female   28      1      2        W./C. 6607   \n",
       "889          890       1    male   26      0      0            111369   \n",
       "890          891       3    male   32      0      0            370376   \n",
       "\n",
       "        Fare Cabin Embarked  family-size  Fare_per_family  Title  \n",
       "0     7.2500   NaN        S            2          3.62500      0  \n",
       "1    71.2833   C85        C            2         35.64165      1  \n",
       "2     7.9250   NaN        S            1          7.92500      2  \n",
       "3    53.1000  C123        S            2         26.55000      1  \n",
       "4     8.0500   NaN        S            1          8.05000      0  \n",
       "..       ...   ...      ...          ...              ...    ...  \n",
       "886  13.0000   NaN        S            1         13.00000      3  \n",
       "887  30.0000   B42        S            1         30.00000      2  \n",
       "888  23.4500   NaN        S            4          5.86250      2  \n",
       "889  30.0000  C148        C            1         30.00000      0  \n",
       "890   7.7500   NaN        Q            1          7.75000      0  \n",
       "\n",
       "[891 rows x 13 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = train_data.drop('Survived', axis=1)\n",
    "y = train_data['Survived'].copy()\n",
    "\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "3edc8303",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:15.701787Z",
     "iopub.status.busy": "2024-05-23T03:03:15.700491Z",
     "iopub.status.idle": "2024-05-23T03:03:15.716945Z",
     "shell.execute_reply": "2024-05-23T03:03:15.715424Z"
    },
    "papermill": {
     "duration": 0.044722,
     "end_time": "2024-05-23T03:03:15.719723",
     "exception": false,
     "start_time": "2024-05-23T03:03:15.675001",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Survived           1.000000\n",
       "Title              0.438282\n",
       "Fare               0.257307\n",
       "Fare_per_family    0.221600\n",
       "Parch              0.081629\n",
       "family-size        0.016639\n",
       "PassengerId       -0.005007\n",
       "SibSp             -0.035322\n",
       "Age               -0.064909\n",
       "Pclass            -0.338481\n",
       "Name: Survived, dtype: float64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_nums = ['PassengerId','Title','Survived', 'Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'Fare_per_family', 'family-size']\n",
    "train_num_corr = train_data[data_nums]\n",
    "corr_matrix = train_num_corr.corr()\n",
    "\n",
    "corr_matrix['Survived'].sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "070c9286",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:15.772422Z",
     "iopub.status.busy": "2024-05-23T03:03:15.772019Z",
     "iopub.status.idle": "2024-05-23T03:03:15.782138Z",
     "shell.execute_reply": "2024-05-23T03:03:15.780805Z"
    },
    "papermill": {
     "duration": 0.040204,
     "end_time": "2024-05-23T03:03:15.785470",
     "exception": false,
     "start_time": "2024-05-23T03:03:15.745266",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "features_drop = ['Ticket', 'SibSp', 'Parch']\n",
    "X = X.drop(features_drop, axis=1)\n",
    "test_data = test_data.drop(features_drop, axis=1)\n",
    "\n",
    "X = X.drop(['PassengerId'], axis=1)\n",
    "X_test_data = test_data.drop(columns=['PassengerId'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "5951644c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:15.834844Z",
     "iopub.status.busy": "2024-05-23T03:03:15.834408Z",
     "iopub.status.idle": "2024-05-23T03:03:15.839988Z",
     "shell.execute_reply": "2024-05-23T03:03:15.838595Z"
    },
    "papermill": {
     "duration": 0.03316,
     "end_time": "2024-05-23T03:03:15.842549",
     "exception": false,
     "start_time": "2024-05-23T03:03:15.809389",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_num = ['Pclass', 'Age', 'Fare', 'Fare_per_family', 'family-size']\n",
    "train_cat = ['Title', 'Sex', 'Cabin', 'Embarked']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "b1635e7e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:15.893663Z",
     "iopub.status.busy": "2024-05-23T03:03:15.893231Z",
     "iopub.status.idle": "2024-05-23T03:03:17.801541Z",
     "shell.execute_reply": "2024-05-23T03:03:17.800085Z"
    },
    "papermill": {
     "duration": 1.936875,
     "end_time": "2024-05-23T03:03:17.804453",
     "exception": false,
     "start_time": "2024-05-23T03:03:15.867578",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from sklearn.compose import ColumnTransformer\n",
    "\n",
    "num_atr = list(train_num)\n",
    "cat_atr = train_cat\n",
    "\n",
    "# Pipeline para features numéricas\n",
    "pipeline_num = Pipeline([\n",
    "    ('imputer', SimpleImputer(strategy='median')),  # Preenche os valores ausentes com a mediana\n",
    "    ('std_scaler', StandardScaler())  # Padroniza as features\n",
    "])\n",
    "\n",
    "pipeline_cat = Pipeline([\n",
    "    ('imputer', SimpleImputer(strategy='most_frequent')),\n",
    "    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
    "])\n",
    "\n",
    "full_pipeline = ColumnTransformer([\n",
    "    ('num', pipeline_num, num_atr),\n",
    "    ('cat', pipeline_cat, cat_atr),\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "6278347f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:17.852276Z",
     "iopub.status.busy": "2024-05-23T03:03:17.851896Z",
     "iopub.status.idle": "2024-05-23T03:03:17.867264Z",
     "shell.execute_reply": "2024-05-23T03:03:17.866079Z"
    },
    "papermill": {
     "duration": 0.042228,
     "end_time": "2024-05-23T03:03:17.869775",
     "exception": false,
     "start_time": "2024-05-23T03:03:17.827547",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((712, 1), (179, 1))"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=42)\n",
    "\n",
    "y_train = y_train.values.reshape(-1, 1)\n",
    "y_test = y_test.values.reshape(-1, 1)\n",
    "\n",
    "y_train.shape, y_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "75865d81",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:17.919080Z",
     "iopub.status.busy": "2024-05-23T03:03:17.917936Z",
     "iopub.status.idle": "2024-05-23T03:03:17.958595Z",
     "shell.execute_reply": "2024-05-23T03:03:17.957129Z"
    },
    "papermill": {
     "duration": 0.068157,
     "end_time": "2024-05-23T03:03:17.961427",
     "exception": false,
     "start_time": "2024-05-23T03:03:17.893270",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_data_prepared = full_pipeline.fit_transform(X_train).toarray()\n",
    "test_datas_prepared = full_pipeline.transform(X_test_data).toarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "d1de5ee6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:18.011160Z",
     "iopub.status.busy": "2024-05-23T03:03:18.010460Z",
     "iopub.status.idle": "2024-05-23T03:03:18.017268Z",
     "shell.execute_reply": "2024-05-23T03:03:18.015853Z"
    },
    "papermill": {
     "duration": 0.034935,
     "end_time": "2024-05-23T03:03:18.020069",
     "exception": false,
     "start_time": "2024-05-23T03:03:17.985134",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((712, 131), (418, 131))"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data_prepared.shape, test_datas_prepared.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "58ee94a9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:18.072687Z",
     "iopub.status.busy": "2024-05-23T03:03:18.072203Z",
     "iopub.status.idle": "2024-05-23T03:03:18.078937Z",
     "shell.execute_reply": "2024-05-23T03:03:18.077351Z"
    },
    "papermill": {
     "duration": 0.036444,
     "end_time": "2024-05-23T03:03:18.082131",
     "exception": false,
     "start_time": "2024-05-23T03:03:18.045687",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test_data['Survived'] = ''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "4e648a21",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:18.134332Z",
     "iopub.status.busy": "2024-05-23T03:03:18.133419Z",
     "iopub.status.idle": "2024-05-23T03:03:18.141921Z",
     "shell.execute_reply": "2024-05-23T03:03:18.140657Z"
    },
    "papermill": {
     "duration": 0.037673,
     "end_time": "2024-05-23T03:03:18.144962",
     "exception": false,
     "start_time": "2024-05-23T03:03:18.107289",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.naive_bayes import GaussianNB\n",
    "\n",
    "nb_classifier = GaussianNB()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "801a9c3d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:18.197839Z",
     "iopub.status.busy": "2024-05-23T03:03:18.197436Z",
     "iopub.status.idle": "2024-05-23T03:03:18.203520Z",
     "shell.execute_reply": "2024-05-23T03:03:18.202146Z"
    },
    "papermill": {
     "duration": 0.035194,
     "end_time": "2024-05-23T03:03:18.206180",
     "exception": false,
     "start_time": "2024-05-23T03:03:18.170986",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import cross_val_score, KFold\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "y_train = y_train.ravel()\n",
    "\n",
    "kf = KFold(n_splits=5, shuffle=True, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "92386dfa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:18.259286Z",
     "iopub.status.busy": "2024-05-23T03:03:18.258842Z",
     "iopub.status.idle": "2024-05-23T03:03:18.372989Z",
     "shell.execute_reply": "2024-05-23T03:03:18.371242Z"
    },
    "papermill": {
     "duration": 0.144684,
     "end_time": "2024-05-23T03:03:18.376133",
     "exception": false,
     "start_time": "2024-05-23T03:03:18.231449",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=KFold(n_splits=5, random_state=42, shuffle=True),\n",
       "             estimator=GaussianNB(),\n",
       "             param_grid=[{&#x27;priors&#x27;: [None],\n",
       "                          &#x27;var_smoothing&#x27;: [1e-09, 1e-08, 1e-07, 1e-06,\n",
       "                                            1e-05]}],\n",
       "             scoring=&#x27;accuracy&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=KFold(n_splits=5, random_state=42, shuffle=True),\n",
       "             estimator=GaussianNB(),\n",
       "             param_grid=[{&#x27;priors&#x27;: [None],\n",
       "                          &#x27;var_smoothing&#x27;: [1e-09, 1e-08, 1e-07, 1e-06,\n",
       "                                            1e-05]}],\n",
       "             scoring=&#x27;accuracy&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: GaussianNB</label><div class=\"sk-toggleable__content\"><pre>GaussianNB()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GaussianNB</label><div class=\"sk-toggleable__content\"><pre>GaussianNB()</pre></div></div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "GridSearchCV(cv=KFold(n_splits=5, random_state=42, shuffle=True),\n",
       "             estimator=GaussianNB(),\n",
       "             param_grid=[{'priors': [None],\n",
       "                          'var_smoothing': [1e-09, 1e-08, 1e-07, 1e-06,\n",
       "                                            1e-05]}],\n",
       "             scoring='accuracy')"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "param_grid = [\n",
    "    {'priors': [None], 'var_smoothing': [1e-9, 1e-8, 1e-7, 1e-6, 1e-5]}\n",
    "]\n",
    "\n",
    "grid_search = GridSearchCV(nb_classifier, param_grid, cv=kf, scoring='accuracy', refit=True)\n",
    "grid_search.fit(train_data_prepared, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "926b2fff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:18.428638Z",
     "iopub.status.busy": "2024-05-23T03:03:18.428142Z",
     "iopub.status.idle": "2024-05-23T03:03:18.435088Z",
     "shell.execute_reply": "2024-05-23T03:03:18.433626Z"
    },
    "papermill": {
     "duration": 0.036448,
     "end_time": "2024-05-23T03:03:18.438174",
     "exception": false,
     "start_time": "2024-05-23T03:03:18.401726",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "best_nb_classifier = grid_search.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "eeff9cce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:18.491302Z",
     "iopub.status.busy": "2024-05-23T03:03:18.490860Z",
     "iopub.status.idle": "2024-05-23T03:03:18.511934Z",
     "shell.execute_reply": "2024-05-23T03:03:18.510212Z"
    },
    "papermill": {
     "duration": 0.052416,
     "end_time": "2024-05-23T03:03:18.515420",
     "exception": false,
     "start_time": "2024-05-23T03:03:18.463004",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Score accuracy:  0.6256983240223464\n"
     ]
    }
   ],
   "source": [
    "test_data_prepared = full_pipeline.transform(X_test).toarray()\n",
    "# Predição usando o classificador Naive Bayes Gaussiano\n",
    "nb_predict = best_nb_classifier.predict(test_data_prepared)\n",
    "\n",
    "# Avaliação do desempenho usando a métrica accuracy\n",
    "val_accuracy_nb = accuracy_score(y_test, nb_predict)\n",
    "print('Score accuracy: ', val_accuracy_nb)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "6f465e5c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:18.567674Z",
     "iopub.status.busy": "2024-05-23T03:03:18.566879Z",
     "iopub.status.idle": "2024-05-23T03:03:18.572250Z",
     "shell.execute_reply": "2024-05-23T03:03:18.571146Z"
    },
    "papermill": {
     "duration": 0.034652,
     "end_time": "2024-05-23T03:03:18.574957",
     "exception": false,
     "start_time": "2024-05-23T03:03:18.540305",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "\n",
    "y_train = y_train.ravel()\n",
    "\n",
    "knn = KNeighborsClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "2cd0e81e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:18.627149Z",
     "iopub.status.busy": "2024-05-23T03:03:18.626762Z",
     "iopub.status.idle": "2024-05-23T03:03:18.633339Z",
     "shell.execute_reply": "2024-05-23T03:03:18.631794Z"
    },
    "papermill": {
     "duration": 0.035986,
     "end_time": "2024-05-23T03:03:18.635871",
     "exception": false,
     "start_time": "2024-05-23T03:03:18.599885",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "param_grid = [\n",
    "    {'n_neighbors':range(3,20), 'algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'],\n",
    "      'metric': ['euclidean', 'manhattan', 'chebyshev', 'minkowski']\n",
    "    }\n",
    "]\n",
    "\n",
    "grid_search = GridSearchCV(knn, param_grid, cv=kf, scoring='accuracy', refit=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "3f6826e1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:18.689826Z",
     "iopub.status.busy": "2024-05-23T03:03:18.689421Z",
     "iopub.status.idle": "2024-05-23T03:03:53.681179Z",
     "shell.execute_reply": "2024-05-23T03:03:53.679638Z"
    },
    "papermill": {
     "duration": 35.045778,
     "end_time": "2024-05-23T03:03:53.708642",
     "exception": false,
     "start_time": "2024-05-23T03:03:18.662864",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=KFold(n_splits=5, random_state=42, shuffle=True),\n",
       "             estimator=KNeighborsClassifier(),\n",
       "             param_grid=[{&#x27;algorithm&#x27;: [&#x27;auto&#x27;, &#x27;ball_tree&#x27;, &#x27;kd_tree&#x27;,\n",
       "                                        &#x27;brute&#x27;],\n",
       "                          &#x27;metric&#x27;: [&#x27;euclidean&#x27;, &#x27;manhattan&#x27;, &#x27;chebyshev&#x27;,\n",
       "                                     &#x27;minkowski&#x27;],\n",
       "                          &#x27;n_neighbors&#x27;: range(3, 20)}],\n",
       "             scoring=&#x27;accuracy&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=KFold(n_splits=5, random_state=42, shuffle=True),\n",
       "             estimator=KNeighborsClassifier(),\n",
       "             param_grid=[{&#x27;algorithm&#x27;: [&#x27;auto&#x27;, &#x27;ball_tree&#x27;, &#x27;kd_tree&#x27;,\n",
       "                                        &#x27;brute&#x27;],\n",
       "                          &#x27;metric&#x27;: [&#x27;euclidean&#x27;, &#x27;manhattan&#x27;, &#x27;chebyshev&#x27;,\n",
       "                                     &#x27;minkowski&#x27;],\n",
       "                          &#x27;n_neighbors&#x27;: range(3, 20)}],\n",
       "             scoring=&#x27;accuracy&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "GridSearchCV(cv=KFold(n_splits=5, random_state=42, shuffle=True),\n",
       "             estimator=KNeighborsClassifier(),\n",
       "             param_grid=[{'algorithm': ['auto', 'ball_tree', 'kd_tree',\n",
       "                                        'brute'],\n",
       "                          'metric': ['euclidean', 'manhattan', 'chebyshev',\n",
       "                                     'minkowski'],\n",
       "                          'n_neighbors': range(3, 20)}],\n",
       "             scoring='accuracy')"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_search.fit(train_data_prepared, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "7059289a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:53.760656Z",
     "iopub.status.busy": "2024-05-23T03:03:53.759915Z",
     "iopub.status.idle": "2024-05-23T03:03:53.766639Z",
     "shell.execute_reply": "2024-05-23T03:03:53.764955Z"
    },
    "papermill": {
     "duration": 0.035938,
     "end_time": "2024-05-23T03:03:53.769895",
     "exception": false,
     "start_time": "2024-05-23T03:03:53.733957",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "grid_best_knn = grid_search.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "a9aae10f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:53.823854Z",
     "iopub.status.busy": "2024-05-23T03:03:53.823079Z",
     "iopub.status.idle": "2024-05-23T03:03:53.859451Z",
     "shell.execute_reply": "2024-05-23T03:03:53.858237Z"
    },
    "papermill": {
     "duration": 0.06546,
     "end_time": "2024-05-23T03:03:53.862154",
     "exception": false,
     "start_time": "2024-05-23T03:03:53.796694",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Score_knn:  0.8212290502793296\n"
     ]
    }
   ],
   "source": [
    "knn_predict = grid_best_knn.predict(test_data_prepared)\n",
    "val_accuracy_knn = accuracy_score(y_test, knn_predict)\n",
    "print('Score_knn: ', val_accuracy_knn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "789066f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:53.914573Z",
     "iopub.status.busy": "2024-05-23T03:03:53.914103Z",
     "iopub.status.idle": "2024-05-23T03:03:53.957995Z",
     "shell.execute_reply": "2024-05-23T03:03:53.956315Z"
    },
    "papermill": {
     "duration": 0.074872,
     "end_time": "2024-05-23T03:03:53.961406",
     "exception": false,
     "start_time": "2024-05-23T03:03:53.886534",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "dtc = DecisionTreeClassifier(random_state=42)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "01d88fda",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:54.014537Z",
     "iopub.status.busy": "2024-05-23T03:03:54.014116Z",
     "iopub.status.idle": "2024-05-23T03:03:54.021106Z",
     "shell.execute_reply": "2024-05-23T03:03:54.019978Z"
    },
    "papermill": {
     "duration": 0.036489,
     "end_time": "2024-05-23T03:03:54.023926",
     "exception": false,
     "start_time": "2024-05-23T03:03:53.987437",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "param_grid = [\n",
    "    {'criterion': ['gini', 'entropy'], 'max_depth': [None, 3, 5, 7, 10],\n",
    "     'min_samples_split': [2, 5, 10],'min_samples_leaf': [1, 2, 4]\n",
    "    }\n",
    "]\n",
    "\n",
    "grid_search = GridSearchCV(dtc, param_grid, cv=kf, scoring='accuracy', refit=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "eaec4659",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:54.076347Z",
     "iopub.status.busy": "2024-05-23T03:03:54.075916Z",
     "iopub.status.idle": "2024-05-23T03:03:56.552869Z",
     "shell.execute_reply": "2024-05-23T03:03:56.551666Z"
    },
    "papermill": {
     "duration": 2.506335,
     "end_time": "2024-05-23T03:03:56.555515",
     "exception": false,
     "start_time": "2024-05-23T03:03:54.049180",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=KFold(n_splits=5, random_state=42, shuffle=True),\n",
       "             estimator=DecisionTreeClassifier(random_state=42),\n",
       "             param_grid=[{&#x27;criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;],\n",
       "                          &#x27;max_depth&#x27;: [None, 3, 5, 7, 10],\n",
       "                          &#x27;min_samples_leaf&#x27;: [1, 2, 4],\n",
       "                          &#x27;min_samples_split&#x27;: [2, 5, 10]}],\n",
       "             scoring=&#x27;accuracy&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=KFold(n_splits=5, random_state=42, shuffle=True),\n",
       "             estimator=DecisionTreeClassifier(random_state=42),\n",
       "             param_grid=[{&#x27;criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;],\n",
       "                          &#x27;max_depth&#x27;: [None, 3, 5, 7, 10],\n",
       "                          &#x27;min_samples_leaf&#x27;: [1, 2, 4],\n",
       "                          &#x27;min_samples_split&#x27;: [2, 5, 10]}],\n",
       "             scoring=&#x27;accuracy&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(random_state=42)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(random_state=42)</pre></div></div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "GridSearchCV(cv=KFold(n_splits=5, random_state=42, shuffle=True),\n",
       "             estimator=DecisionTreeClassifier(random_state=42),\n",
       "             param_grid=[{'criterion': ['gini', 'entropy'],\n",
       "                          'max_depth': [None, 3, 5, 7, 10],\n",
       "                          'min_samples_leaf': [1, 2, 4],\n",
       "                          'min_samples_split': [2, 5, 10]}],\n",
       "             scoring='accuracy')"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_search.fit(train_data_prepared, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "4108feca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:56.608189Z",
     "iopub.status.busy": "2024-05-23T03:03:56.607742Z",
     "iopub.status.idle": "2024-05-23T03:03:56.612914Z",
     "shell.execute_reply": "2024-05-23T03:03:56.611653Z"
    },
    "papermill": {
     "duration": 0.034516,
     "end_time": "2024-05-23T03:03:56.615485",
     "exception": false,
     "start_time": "2024-05-23T03:03:56.580969",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "grid_best_dtc = grid_search.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "8943b5f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:56.668775Z",
     "iopub.status.busy": "2024-05-23T03:03:56.667706Z",
     "iopub.status.idle": "2024-05-23T03:03:56.675969Z",
     "shell.execute_reply": "2024-05-23T03:03:56.674414Z"
    },
    "papermill": {
     "duration": 0.037738,
     "end_time": "2024-05-23T03:03:56.678497",
     "exception": false,
     "start_time": "2024-05-23T03:03:56.640759",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Score_dtc:  0.8659217877094972\n"
     ]
    }
   ],
   "source": [
    "dtc_pred = grid_best_dtc.predict(test_data_prepared)\n",
    "val_accuracy_dtc = accuracy_score(y_test, dtc_pred)\n",
    "print('Score_dtc: ', val_accuracy_dtc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "c1d70350",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:56.734300Z",
     "iopub.status.busy": "2024-05-23T03:03:56.733742Z",
     "iopub.status.idle": "2024-05-23T03:03:56.811160Z",
     "shell.execute_reply": "2024-05-23T03:03:56.809788Z"
    },
    "papermill": {
     "duration": 0.107593,
     "end_time": "2024-05-23T03:03:56.814010",
     "exception": false,
     "start_time": "2024-05-23T03:03:56.706417",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "rfc = RandomForestClassifier(random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "7f92a669",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:56.867781Z",
     "iopub.status.busy": "2024-05-23T03:03:56.866504Z",
     "iopub.status.idle": "2024-05-23T03:03:56.874224Z",
     "shell.execute_reply": "2024-05-23T03:03:56.872935Z"
    },
    "papermill": {
     "duration": 0.036975,
     "end_time": "2024-05-23T03:03:56.877079",
     "exception": false,
     "start_time": "2024-05-23T03:03:56.840104",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "param_grid = [\n",
    "    {'n_estimators': [100, 200, 300],\n",
    "    'max_depth': [None, 5, 10],\n",
    "    'min_samples_split': [2, 5, 10],\n",
    "    'min_samples_leaf': [1, 2, 4],\n",
    "    'max_features': ['sqrt', 'log2']\n",
    "    }\n",
    "]\n",
    "\n",
    "grid_search = GridSearchCV(rfc, param_grid, cv=kf, scoring='accuracy', refit=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "e202ef13",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:03:56.930436Z",
     "iopub.status.busy": "2024-05-23T03:03:56.929633Z",
     "iopub.status.idle": "2024-05-23T03:11:32.225999Z",
     "shell.execute_reply": "2024-05-23T03:11:32.224768Z"
    },
    "papermill": {
     "duration": 455.352464,
     "end_time": "2024-05-23T03:11:32.254738",
     "exception": false,
     "start_time": "2024-05-23T03:03:56.902274",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=KFold(n_splits=5, random_state=42, shuffle=True),\n",
       "             estimator=RandomForestClassifier(random_state=42),\n",
       "             param_grid=[{&#x27;max_depth&#x27;: [None, 5, 10],\n",
       "                          &#x27;max_features&#x27;: [&#x27;sqrt&#x27;, &#x27;log2&#x27;],\n",
       "                          &#x27;min_samples_leaf&#x27;: [1, 2, 4],\n",
       "                          &#x27;min_samples_split&#x27;: [2, 5, 10],\n",
       "                          &#x27;n_estimators&#x27;: [100, 200, 300]}],\n",
       "             scoring=&#x27;accuracy&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=KFold(n_splits=5, random_state=42, shuffle=True),\n",
       "             estimator=RandomForestClassifier(random_state=42),\n",
       "             param_grid=[{&#x27;max_depth&#x27;: [None, 5, 10],\n",
       "                          &#x27;max_features&#x27;: [&#x27;sqrt&#x27;, &#x27;log2&#x27;],\n",
       "                          &#x27;min_samples_leaf&#x27;: [1, 2, 4],\n",
       "                          &#x27;min_samples_split&#x27;: [2, 5, 10],\n",
       "                          &#x27;n_estimators&#x27;: [100, 200, 300]}],\n",
       "             scoring=&#x27;accuracy&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" ><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "GridSearchCV(cv=KFold(n_splits=5, random_state=42, shuffle=True),\n",
       "             estimator=RandomForestClassifier(random_state=42),\n",
       "             param_grid=[{'max_depth': [None, 5, 10],\n",
       "                          'max_features': ['sqrt', 'log2'],\n",
       "                          'min_samples_leaf': [1, 2, 4],\n",
       "                          'min_samples_split': [2, 5, 10],\n",
       "                          'n_estimators': [100, 200, 300]}],\n",
       "             scoring='accuracy')"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_search.fit(train_data_prepared, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "2fbfdf28",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:11:32.310535Z",
     "iopub.status.busy": "2024-05-23T03:11:32.309822Z",
     "iopub.status.idle": "2024-05-23T03:11:32.314931Z",
     "shell.execute_reply": "2024-05-23T03:11:32.313925Z"
    },
    "papermill": {
     "duration": 0.036836,
     "end_time": "2024-05-23T03:11:32.317769",
     "exception": false,
     "start_time": "2024-05-23T03:11:32.280933",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "grid_best_rfc = grid_search.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "d589f01f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:11:32.373071Z",
     "iopub.status.busy": "2024-05-23T03:11:32.372383Z",
     "iopub.status.idle": "2024-05-23T03:11:32.400024Z",
     "shell.execute_reply": "2024-05-23T03:11:32.398341Z"
    },
    "papermill": {
     "duration": 0.059151,
     "end_time": "2024-05-23T03:11:32.403287",
     "exception": false,
     "start_time": "2024-05-23T03:11:32.344136",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Score:  0.8212290502793296\n"
     ]
    }
   ],
   "source": [
    "rfc_pred = grid_best_rfc.predict(test_data_prepared)\n",
    "val_accuracy_rfc = accuracy_score(y_test, rfc_pred)\n",
    "print('Score: ', val_accuracy_rfc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "71bfbd4b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:11:32.460570Z",
     "iopub.status.busy": "2024-05-23T03:11:32.460137Z",
     "iopub.status.idle": "2024-05-23T03:11:32.466758Z",
     "shell.execute_reply": "2024-05-23T03:11:32.465017Z"
    },
    "papermill": {
     "duration": 0.039848,
     "end_time": "2024-05-23T03:11:32.470016",
     "exception": false,
     "start_time": "2024-05-23T03:11:32.430168",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "resultados = {'Método':['Naive_Bayes', 'KNN', 'Decision_Tree', 'RFC'],\n",
    "              'Precisão':[val_accuracy_nb, val_accuracy_knn, val_accuracy_dtc, val_accuracy_rfc]}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "646777b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:11:32.526246Z",
     "iopub.status.busy": "2024-05-23T03:11:32.525817Z",
     "iopub.status.idle": "2024-05-23T03:11:32.535843Z",
     "shell.execute_reply": "2024-05-23T03:11:32.534248Z"
    },
    "papermill": {
     "duration": 0.042867,
     "end_time": "2024-05-23T03:11:32.538997",
     "exception": false,
     "start_time": "2024-05-23T03:11:32.496130",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tabela Resultados\n",
      "          Método  Precisão\n",
      "0    Naive_Bayes  0.625698\n",
      "1            KNN  0.821229\n",
      "2  Decision_Tree  0.865922\n",
      "3            RFC  0.821229\n"
     ]
    }
   ],
   "source": [
    "df_result = pd.DataFrame(resultados)\n",
    "\n",
    "print('Tabela Resultados')\n",
    "print(df_result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "a89e9a3c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:11:32.593848Z",
     "iopub.status.busy": "2024-05-23T03:11:32.593432Z",
     "iopub.status.idle": "2024-05-23T03:11:32.875846Z",
     "shell.execute_reply": "2024-05-23T03:11:32.874114Z"
    },
    "papermill": {
     "duration": 0.314537,
     "end_time": "2024-05-23T03:11:32.878929",
     "exception": false,
     "start_time": "2024-05-23T03:11:32.564392",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Método'>"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "colors = ['blue', 'green', 'red', 'pink']\n",
    "df_result.plot(kind='bar', x='Método', y='Precisão', color=colors, legend=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "642aa2a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:11:32.940722Z",
     "iopub.status.busy": "2024-05-23T03:11:32.939189Z",
     "iopub.status.idle": "2024-05-23T03:11:32.956124Z",
     "shell.execute_reply": "2024-05-23T03:11:32.954423Z"
    },
    "papermill": {
     "duration": 0.051449,
     "end_time": "2024-05-23T03:11:32.959001",
     "exception": false,
     "start_time": "2024-05-23T03:11:32.907552",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your submission was successfully saved!\n"
     ]
    }
   ],
   "source": [
    "model_final_pred = grid_best_dtc.predict(test_datas_prepared)\n",
    "\n",
    "output = pd.DataFrame({'PassengerId':test_data.PassengerId, 'Survived':model_final_pred})\n",
    "output.to_csv('submission.csv', index=False)\n",
    "print(\"Your submission was successfully saved!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a1a9d5fe",
   "metadata": {
    "papermill": {
     "duration": 0.028708,
     "end_time": "2024-05-23T03:11:33.017630",
     "exception": false,
     "start_time": "2024-05-23T03:11:32.988922",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 26502,
     "sourceId": 3136,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 508.081162,
   "end_time": "2024-05-23T03:11:33.772788",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-23T03:03:05.691626",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
